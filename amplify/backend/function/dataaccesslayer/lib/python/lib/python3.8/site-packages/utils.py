def fetch_nodes_data(ddb, eclis, return_attributes):
    """
    Selects cases by ecli from DynamoDB and returns specified meta data.
    :param eclis: set of eclis
    :param return_attributes: list of attributes to return
    :return: list of node dicts (containing id, data)
    """
    keys_list = []
    for ecli in eclis:
        keys_list.append({'ecli': ecli, 'ItemType': 'DATA'})

    items = ddb.execute_batch(keys_list, return_attributes)

    nodes = []

    # format node
    for item in items:
        atts = list(item.keys())
        for attribute in atts:
            # remove li attribute if correspondig rs attribute present
            if attribute + '_li' in item:
                item.pop(attribute + '_li')
            # convert set types to lists to make JSON serializable
            if attribute in item and type(item[attribute]) is set:
                item[attribute] = list(item[attribute])
            # remove '_li' suffix from attribute name if applicable
            if attribute in item and attribute.endswith('_li'):
                item[attribute[:-3]] = item[attribute]
                item.pop(attribute)
        nodes.extend([{'id': item['ecli'], 'data': item}])
    return nodes


def verify_input_string(s_params, key):
    val = s_params.get(key)
    if val is None or not isinstance(val, str):
        warnings.warn(f"Invalid input: argument '{key}' of type string expected. Setting '{key}' to ''.")
        return ""
    else:
        return val


def verify_input_string_list(s_params, key):
    val = s_params.get(key)
    if val is None or not isinstance(val, list) or not all(isinstance(elem, str) for elem in val) or len(val) < 1:
        warnings.warn(f"Invalid input: argument '{key}' of type list of strings expected. Setting '{key}' to [''].")
        return [""]
    else:
        return val


def verify_input_int(s_params, key):
    val = s_params.get(key)
    if val is None or not isinstance(val, int) or val < 0:
        warnings.warn(f"Invalid input: argument '{key}' of type int >= 0 expected. Setting '{key}' to 0.")
        return 0
    else:
        return val
